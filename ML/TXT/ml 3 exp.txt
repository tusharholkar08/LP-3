# Libraries Imported
import pandas as pd
import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt
import tensorflow as tf

# Load Dataset
df = pd.read_csv('Churn_Modelling.csv')
df.head()
df.info()

# Plotting Exited Count
plt.xlabel('Exited')
plt.ylabel('Count')
df['Exited'].value_counts().plot.bar()
plt.show()

# Geography Count
df['Geography'].value_counts()

# Encoding Categorical Variables
df = pd.concat([df, pd.get_dummies(df['Geography'], prefix='Geo')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Gender'])], axis=1)
df.info()
df.drop(columns=['RowNumber', 'CustomerId', 'Surname', 'Geography', 'Gender'], inplace=True)
df.head()

# Splitting Data
y = df['Exited'].values
x = df.loc[:, df.columns != 'Exited'].values
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=20, test_size=0.25)

# Scaling Data
from sklearn.preprocessing import StandardScaler
std_x = StandardScaler()
x_train = std_x.fit_transform(x_train)
x_test = std_x.transform(x_test)

# Tensorflow Model - Neural Network Classifier
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential

model = Sequential()
model.add(Flatten(input_shape=(13,)))
model.add(Dense(100, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', metrics=['accuracy'], loss='BinaryCrossentropy')
model.fit(x_train, y_train, batch_size=64, validation_split=0.1, epochs=100)

# Predict and Evaluate Model
pred = model.predict(x_test)
y_pred = [1 if val > 0.5 else 0 for val in pred]

from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
accuracy_score(y_test, y_pred)

# Display Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
display = ConfusionMatrixDisplay(cm)
display.plot()
